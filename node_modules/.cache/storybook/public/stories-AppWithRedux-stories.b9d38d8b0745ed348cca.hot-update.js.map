{"version":3,"file":"stories-AppWithRedux-stories.b9d38d8b0745ed348cca.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAefA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAzFA;AAIA;AAAA;AAuFA;AAAA;AAAA","sources":["webpack://it-incubator-todolist-ts/./src/AppWithRedux.tsx"],"sourcesContent":["import React, {useCallback} from 'react'\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {EditableSpan} from './AddItemForm';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC,\n    removeTodolistAC,\n    todolistsReducer\n} from './state/todolists-reducer';\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './state/store';\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    // addItem:(title:string)=>void\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n/*\nconst Fake = React.memo(function() {\n    console.log(\"FAKE\")\n    const arr = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks.count)\n    return <h1>{arr.length}</h1>\n})\n*/\n\nfunction AppWithRedux() {\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const action = removeTaskAC(id, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const action = addTaskAC(title, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\n        const action = changeTaskStatusAC(id, isDone, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, [dispatch]);\n\n    const removeTodolist = useCallback(function (id: string) {\n        const action = removeTodolistAC(id);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback( (id: string, title: string) => {\n        const action = changeTodolistTitleAC(id, title);\n        dispatch(action);\n    }, [dispatch])\n\n    const addTodolist = useCallback( (title: string) => {\n        const action = addTodolistAC(title);\n        dispatch(action);\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <EditableSpan addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todolists.map(tl => {\n                            return <Grid item key={tl.id}>\n                                <Paper style={{padding: \"10px\"}}>\n                                    <Todolist\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={tasks[tl.id]}\n                                        removeTask={removeTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeStatus}\n                                        filter={tl.filter}\n                                        removeTodolist={removeTodolist}\n                                        changeTaskTitle={changeTaskTitle}\n                                        changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n"],"names":[],"sourceRoot":""}