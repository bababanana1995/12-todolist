"use strict";
globalThis["webpackHotUpdateit_incubator_todolist_ts"]("stories-AppWithRedux-stories",{

/***/ "./src/Todolist.tsx":
/*!**************************!*\
  !*** ./src/Todolist.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Todolist: () => (/* binding */ Todolist)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _EditableSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditableSpan */ "./src/EditableSpan.tsx");
/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Task */ "./src/Task.tsx");
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/IconButton/IconButton.js");
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/Button/Button.js");
/* harmony import */ var _mui_icons_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/icons-material */ "./node_modules/@mui/icons-material/esm/Delete.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Todolist.tsx",
  _s = __webpack_require__.$Refresh$.signature();






const Todolist = /*#__PURE__*/_s( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_c = _s(function (props) {
  _s();
  const addTask = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(title => {
    props.addTask(title, props.id);
  }, [props.addTask, props.id]);
  const removeTodolist = () => {
    props.removeTodolist(props.id);
  };
  const changeTodolistTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(title => {
    props.changeTodolistTitle(props.id, title);
  }, [props.id, props.changeTodolistTitle]);
  const onAllClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);
  const onActiveClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);
  const onCompletedClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);
  let tasksForTodolist = props.tasks;
  if (props.filter === 'active') {
    tasksForTodolist = props.tasks.filter(t => t.isDone === false);
  }
  if (props.filter === 'completed') {
    tasksForTodolist = props.tasks.filter(t => t.isDone === true);
  }
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("h3", {
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_EditableSpan__WEBPACK_IMPORTED_MODULE_1__.AppWithRedux, {
        value: props.title,
        onChange: changeTodolistTitle
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__["default"], {
        onClick: removeTodolist,
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_mui_icons_material__WEBPACK_IMPORTED_MODULE_5__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 17
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 13
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 58,
      columnNumber: 9
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
      children: tasksForTodolist.map(t => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_Task__WEBPACK_IMPORTED_MODULE_2__.Task, {
        task: t,
        changeTaskStatus: props.changeTaskStatus,
        changeTaskTitle: props.changeTaskTitle,
        removeTask: props.removeTask,
        todolistId: props.id
      }, t.id, false, {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 43
      }, this))
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 64,
      columnNumber: 9
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)("div", {
      style: {
        paddingTop: '10px'
      },
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__["default"], {
        variant: props.filter === 'all' ? 'outlined' : 'text',
        onClick: onAllClickHandler,
        color: 'inherit',
        children: "All"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__["default"], {
        variant: props.filter === 'active' ? 'outlined' : 'text',
        onClick: onActiveClickHandler,
        color: 'primary',
        children: "Active"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_6__["default"], {
        variant: props.filter === 'completed' ? 'outlined' : 'text',
        onClick: onCompletedClickHandler,
        color: 'secondary',
        children: "Completed"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 86,
        columnNumber: 13
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 57,
    columnNumber: 12
  }, this);
}, "A69eojXGiXxeKhXoPJklCyEXyY8=")), "A69eojXGiXxeKhXoPJklCyEXyY8=");
_c2 = Todolist;
var _c, _c2;
__webpack_require__.$Refresh$.register(_c, "Todolist$React.memo");
__webpack_require__.$Refresh$.register(_c2, "Todolist");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    Todolist.displayName = "Todolist";
    // @ts-ignore
    Todolist.__docgenInfo = { "description": "", "displayName": "Todolist", "props": { "id": { "defaultValue": null, "description": "", "name": "id", "required": true, "type": { "name": "string" } }, "title": { "defaultValue": null, "description": "", "name": "title", "required": true, "type": { "name": "string" } }, "tasks": { "defaultValue": null, "description": "", "name": "tasks", "required": true, "type": { "name": "TaskType[]" } }, "changeFilter": { "defaultValue": null, "description": "", "name": "changeFilter", "required": true, "type": { "name": "(value: FilterValuesType, todolistId: string) => void" } }, "addTask": { "defaultValue": null, "description": "", "name": "addTask", "required": true, "type": { "name": "(title: string, todolistId: string) => void" } }, "changeTaskStatus": { "defaultValue": null, "description": "", "name": "changeTaskStatus", "required": true, "type": { "name": "(id: string, isDone: boolean, todolistId: string) => void" } }, "changeTaskTitle": { "defaultValue": null, "description": "", "name": "changeTaskTitle", "required": true, "type": { "name": "(taskId: string, newTitle: string, todolistId: string) => void" } }, "removeTask": { "defaultValue": null, "description": "", "name": "removeTask", "required": true, "type": { "name": "(taskId: string, todolistId: string) => void" } }, "removeTodolist": { "defaultValue": null, "description": "", "name": "removeTodolist", "required": true, "type": { "name": "(id: string) => void" } }, "changeTodolistTitle": { "defaultValue": null, "description": "", "name": "changeTodolistTitle", "required": true, "type": { "name": "(id: string, newTitle: string) => void" } }, "filter": { "defaultValue": null, "description": "", "name": "filter", "required": true, "type": { "name": "enum", "value": [{ "value": "\"all\"" }, { "value": "\"active\"" }, { "value": "\"completed\"" }] } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/Todolist.tsx#Todolist"] = { docgenInfo: Todolist.__docgenInfo, name: "Todolist", path: "src/Todolist.tsx#Todolist" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=stories-AppWithRedux-stories.19ae1439b05f1f6eaef2.hot-update.js.map