{"version":3,"file":"stories-Task-stories.950eb7db083118d438b7.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AAQA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AApBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AACA;AAAA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAYA;AAAA;AAvBA;AAAA;AAAA","sources":["webpack://it-incubator-todolist-ts/./node_modules/@storybook/addon-actions/dist/chunk-GOSXJPAJ.mjs","webpack://it-incubator-todolist-ts/./node_modules/@storybook/addon-actions/dist/index.mjs","webpack://it-incubator-todolist-ts/./src/EditableSpan.tsx","webpack://it-incubator-todolist-ts/./src/Task.tsx"],"sourcesContent":["import { config, action } from './chunk-AY7I2SME.mjs';\n\nvar actions=(...args)=>{let options=config,names=args;names.length===1&&Array.isArray(names[0])&&([names]=names),names.length!==1&&typeof names[names.length-1]!=\"string\"&&(options={...config,...names.pop()});let namesObject=names[0];(names.length!==1||typeof namesObject==\"string\")&&(namesObject={},names.forEach(name=>{namesObject[name]=name;}));let actionsObject={};return Object.keys(namesObject).forEach(name=>{actionsObject[name]=action(namesObject[name],options);}),actionsObject};\n\nexport { actions };\n","export { actions } from './chunk-GOSXJPAJ.mjs';\nexport { action, config, configureActions } from './chunk-AY7I2SME.mjs';\nexport { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY } from './chunk-VWCVBQ22.mjs';\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@mui/material\";\n\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const AppWithRedux = React.memo(function(props: EditableSpanPropsType) {\n\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import Checkbox from '@mui/material/Checkbox/Checkbox'\nimport React, {ChangeEvent, useCallback} from 'react'\nimport {AppWithRedux} from './EditableSpan'\nimport {TaskType} from './Todolist'\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype TaskPropsType = {\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\n\n\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.isDone}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <AppWithRedux value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n"],"names":[],"sourceRoot":""}