{"version":3,"file":"stories-EditableSpan-stories.950eb7db083118d438b7.hot-update.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAAA;AAQA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AApBA;AAAA;AAAA","sources":["webpack://it-incubator-todolist-ts/./node_modules/@storybook/addon-actions/dist/chunk-GOSXJPAJ.mjs","webpack://it-incubator-todolist-ts/./node_modules/@storybook/addon-actions/dist/index.mjs","webpack://it-incubator-todolist-ts/./src/EditableSpan.tsx"],"sourcesContent":["import { config, action } from './chunk-AY7I2SME.mjs';\n\nvar actions=(...args)=>{let options=config,names=args;names.length===1&&Array.isArray(names[0])&&([names]=names),names.length!==1&&typeof names[names.length-1]!=\"string\"&&(options={...config,...names.pop()});let namesObject=names[0];(names.length!==1||typeof namesObject==\"string\")&&(namesObject={},names.forEach(name=>{namesObject[name]=name;}));let actionsObject={};return Object.keys(namesObject).forEach(name=>{actionsObject[name]=action(namesObject[name],options);}),actionsObject};\n\nexport { actions };\n","export { actions } from './chunk-GOSXJPAJ.mjs';\nexport { action, config, configureActions } from './chunk-AY7I2SME.mjs';\nexport { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY } from './chunk-VWCVBQ22.mjs';\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@mui/material\";\n\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const AppWithRedux = React.memo(function(props: EditableSpanPropsType) {\n\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n"],"names":[],"sourceRoot":""}