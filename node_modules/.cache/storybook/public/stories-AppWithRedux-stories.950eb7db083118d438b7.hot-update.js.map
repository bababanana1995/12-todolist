{"version":3,"file":"stories-AppWithRedux-stories.950eb7db083118d438b7.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAOA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAxCA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAcfA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAzFA;AAIA;AAAA;AAuFA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AAAA;AAQA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AApBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AACA;AAAA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AAYA;AAAA;AAvBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAGA;AAEA;AACA;AACA;AAAA;AAuBA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AA7DA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAmxGA;AA0BA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://it-incubator-todolist-ts/./src/AddItemForm.tsx","webpack://it-incubator-todolist-ts/./src/AppWithRedux.tsx","webpack://it-incubator-todolist-ts/./src/EditableSpan.tsx","webpack://it-incubator-todolist-ts/./src/Task.tsx","webpack://it-incubator-todolist-ts/./src/Todolist.tsx","webpack://it-incubator-todolist-ts/./src/state/tasks-reducer.ts","webpack://it-incubator-todolist-ts/./src/state/todolists-reducer.ts","webpack://it-incubator-todolist-ts/./src/App.css","webpack://it-incubator-todolist-ts/./src/App.css?c549"],"sourcesContent":["import TextField from '@mui/material/TextField/TextField';\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton} from \"@mui/material\";\nimport {AddBox} from \"@mui/icons-material\";\n\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const EditableSpan = React.memo( (props: AddItemFormPropsType) => {\n\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItem}>\n            <AddBox />\n        </IconButton>\n    </div>\n} );\n","import React, {useCallback} from 'react'\nimport './App.css';\nimport {TaskType, Todolist} from './Todolist';\nimport {EditableSpan} from './AddItemForm';\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC,\n    removeTodolistAC,\n    todolistsReducer\n} from './state/todolists-reducer';\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './state/store';\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n/*\nconst Fake = React.memo(function() {\n    console.log(\"FAKE\")\n    const arr = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks.count)\n    return <h1>{arr.length}</h1>\n})\n*/\n\nfunction AppWithRedux() {\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const action = removeTaskAC(id, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const action = addTaskAC(title, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\n        const action = changeTaskStatusAC(id, isDone, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, [dispatch]);\n\n    const removeTodolist = useCallback(function (id: string) {\n        const action = removeTodolistAC(id);\n        dispatch(action);\n    }, [dispatch]);\n\n    const changeTodolistTitle = useCallback( (id: string, title: string) => {\n        const action = changeTodolistTitleAC(id, title);\n        dispatch(action);\n    }, [dispatch])\n\n    const addTodolist = useCallback( (title: string) => {\n        const action = addTodolistAC(title);\n        dispatch(action);\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    <EditableSpan addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todolists.map(tl => {\n                            return <Grid item key={tl.id}>\n                                <Paper style={{padding: \"10px\"}}>\n                                    <Todolist\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={tasks[tl.id]}\n                                        removeTask={removeTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeStatus}\n                                        filter={tl.filter}\n                                        removeTodolist={removeTodolist}\n                                        changeTaskTitle={changeTaskTitle}\n                                        changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@mui/material\";\n\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const AppWithRedux = React.memo(function(props: EditableSpanPropsType) {\n\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n})\n","import Checkbox from '@mui/material/Checkbox/Checkbox'\nimport React, {ChangeEvent, useCallback} from 'react'\nimport {AppWithRedux} from './EditableSpan'\nimport {TaskType} from './Todolist'\nimport {IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\ntype TaskPropsType = {\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    task: TaskType\n    todolistId: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\n    }\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\n\n\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.isDone}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <AppWithRedux value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback} from 'react'\nimport {FilterValuesType} from './App'\nimport {EditableSpan} from './AddItemForm'\nimport {AppWithRedux} from './EditableSpan'\n\nimport {Task} from './Task'\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\n    }\n\n    return <div>\n        <h3><AppWithRedux value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AppWithRedux addItem={addTask}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task\n                    task={t}\n                    changeTaskStatus={props.changeTaskStatus}\n                    changeTaskTitle={props.changeTaskTitle}\n                    removeTask={props.removeTask}\n                    todolistId={props.id}\n                    key={t.id}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    count: []\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/react-scripts/node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/react-scripts/node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\r\\n.App {\\r\\n  padding: 30px;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.App > div {\\r\\n  margin-right: 50px;\\r\\n}\\r\\n\\r\\n.error {\\r\\n  border: red 1px solid;\\r\\n}\\r\\n\\r\\n.error-message {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.active-filter {\\r\\n  background-color: aquamarine;\\r\\n}\\r\\n\\r\\n.is-done {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n*/\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/App.css\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC\",\"sourcesContent\":[\"/*\\r\\n.App {\\r\\n  padding: 30px;\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.App > div {\\r\\n  margin-right: 50px;\\r\\n}\\r\\n\\r\\n.error {\\r\\n  border: red 1px solid;\\r\\n}\\r\\n\\r\\n.error-message {\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.active-filter {\\r\\n  background-color: aquamarine;\\r\\n}\\r\\n\\r\\n.is-done {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n*/\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {};\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/react-scripts/node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/react-scripts/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[1]!../node_modules/react-scripts/node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[2]!./App.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/react-scripts/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[1]!../node_modules/react-scripts/node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[2]!./App.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../node_modules/react-scripts/node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[1]!../node_modules/react-scripts/node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[5].oneOf[5].use[2]!./App.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}