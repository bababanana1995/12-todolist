{"version":3,"file":"stories-AppWithRedux-stories.19ae1439b05f1f6eaef2.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAEA;AACA;AACA;AAAA;AAuBA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AA7DA;AAAA;AAAA","sources":["webpack://it-incubator-todolist-ts/./src/Todolist.tsx"],"sourcesContent":["import React, {useCallback} from 'react'\nimport {FilterValuesType} from './App'\nimport {EditableSpan} from './AddItemForm'\nimport {AppWithRedux} from './EditableSpan'\n\nimport {Task} from './Task'\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\n    }\n\n    return <div>\n        <h3><AppWithRedux value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        {/*<AppWithRedux addItem={addTask}/>*/}\n        <div>\n            {\n                tasksForTodolist.map(t => <Task\n                    task={t}\n                    changeTaskStatus={props.changeTaskStatus}\n                    changeTaskTitle={props.changeTaskTitle}\n                    removeTask={props.removeTask}\n                    todolistId={props.id}\n                    key={t.id}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n"],"names":[],"sourceRoot":""}