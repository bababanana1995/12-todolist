"use strict";
globalThis["webpackHotUpdateit_incubator_todolist_ts"]("stories-Task-stories",{

/***/ "./src/stories/Task.stories.tsx":
/*!**************************************!*\
  !*** ./src/stories/Task.stories.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TaskIsDoneStory: () => (/* binding */ TaskIsDoneStory),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Task */ "./src/Task.tsx");
/* harmony import */ var _Todolist__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Todolist */ "./src/Todolist.tsx");
/* harmony import */ var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @storybook/addon-actions */ "./node_modules/@storybook/addon-actions/dist/index.mjs");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _TaskIsDoneStory$para, _TaskIsDoneStory$para2, _TaskIsDoneStory$para3;





// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
const meta = {
  title: 'TODOLISTS/Task',
  component: _Task__WEBPACK_IMPORTED_MODULE_0__.Task,
  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs
  tags: ['autodocs'],
  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes
  argTypes: {}
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args
const TaskIsDoneStory = {
  args: {
    changeTaskStatus: (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)('changeTaskStatus'),
    changeTaskTitle: (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)('changeTaskStatus'),
    removeTask: (0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.action)('changeTaskStatus'),
    task: _Todolist__WEBPACK_IMPORTED_MODULE_1__.TaskType,
    todolistId: prop_types__WEBPACK_IMPORTED_MODULE_3__.string
  }
};
TaskIsDoneStory.parameters = {
  ...TaskIsDoneStory.parameters,
  docs: {
    ...((_TaskIsDoneStory$para = TaskIsDoneStory.parameters) === null || _TaskIsDoneStory$para === void 0 ? void 0 : _TaskIsDoneStory$para.docs),
    source: {
      originalSource: "{\n  args: {\n    changeTaskStatus: action('changeTaskStatus'),\n    changeTaskTitle: action('changeTaskStatus'),\n    removeTask: action('changeTaskStatus'),\n    task: TaskType,\n    todolistId: string\n  }\n}",
      ...((_TaskIsDoneStory$para2 = TaskIsDoneStory.parameters) === null || _TaskIsDoneStory$para2 === void 0 ? void 0 : (_TaskIsDoneStory$para3 = _TaskIsDoneStory$para2.docs) === null || _TaskIsDoneStory$para3 === void 0 ? void 0 : _TaskIsDoneStory$para3.source)
    }
  }
};
const __namedExportsOrder = ["TaskIsDoneStory"];

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/AddItemForm.tsx":
/*!*****************************!*\
  !*** ./src/AddItemForm.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AddItemForm: () => (/* binding */ AddItemForm)
/* harmony export */ });
/* harmony import */ var _mui_material_TextField_TextField__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mui/material/TextField/TextField */ "./node_modules/@mui/material/TextField/TextField.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/IconButton/IconButton.js");
/* harmony import */ var _mui_icons_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/icons-material */ "./node_modules/@mui/icons-material/esm/AddBox.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/AddItemForm.tsx",
  _s = __webpack_require__.$Refresh$.signature();





const AddItemForm = /*#__PURE__*/_s( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_c = _s(props => {
  _s();
  let [title, setTitle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("");
  let [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  const addItem = () => {
    if (title.trim() !== "") {
      props.addItem(title);
      setTitle("");
    } else {
      setError("Title is required");
    }
  };
  const onChangeHandler = e => {
    setTitle(e.currentTarget.value);
  };
  const onKeyPressHandler = e => {
    if (error !== null) {
      setError(null);
    }
    if (e.charCode === 13) {
      addItem();
    }
  };
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_mui_material_TextField_TextField__WEBPACK_IMPORTED_MODULE_2__["default"], {
      variant: "outlined",
      error: !!error,
      value: title,
      onChange: onChangeHandler,
      onKeyPress: onKeyPressHandler,
      label: "Title",
      helperText: error
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 39,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_3__["default"], {
      color: "primary",
      onClick: addItem,
      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_mui_icons_material__WEBPACK_IMPORTED_MODULE_4__["default"], {}, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 48,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 47,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 38,
    columnNumber: 12
  }, undefined);
}, "MVMLmy4kP556v7E3KHW9YED2Wxk=")), "MVMLmy4kP556v7E3KHW9YED2Wxk=");
_c2 = AddItemForm;
var _c, _c2;
__webpack_require__.$Refresh$.register(_c, "AddItemForm$React.memo");
__webpack_require__.$Refresh$.register(_c2, "AddItemForm");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    AddItemForm.displayName = "AddItemForm";
    // @ts-ignore
    AddItemForm.__docgenInfo = { "description": "", "displayName": "AddItemForm", "props": { "addItem": { "defaultValue": null, "description": "", "name": "addItem", "required": true, "type": { "name": "(title: string) => void" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/AddItemForm.tsx#AddItemForm"] = { docgenInfo: AddItemForm.__docgenInfo, name: "AddItemForm", path: "src/AddItemForm.tsx#AddItemForm" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "./src/EditableSpan.tsx":
/*!******************************!*\
  !*** ./src/EditableSpan.tsx ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditableSpan: () => (/* binding */ EditableSpan)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/TextField/TextField.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/EditableSpan.tsx",
  _s = __webpack_require__.$Refresh$.signature();



const EditableSpan = /*#__PURE__*/_s( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_c = _s(function (props) {
  _s();
  let [editMode, setEditMode] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  let [title, setTitle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.value);
  const activateEditMode = () => {
    setEditMode(true);
    setTitle(props.value);
  };
  const activateViewMode = () => {
    setEditMode(false);
    props.onChange(title);
  };
  const changeTitle = e => {
    setTitle(e.currentTarget.value);
  };
  return editMode ? /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_2__["default"], {
    value: title,
    onChange: changeTitle,
    autoFocus: true,
    onBlur: activateViewMode
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 28,
    columnNumber: 14
  }, this) : /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
    onDoubleClick: activateEditMode,
    children: props.value
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 29,
    columnNumber: 11
  }, this);
}, "QeJF1daIrCh753fIFS8q1vMlE0A=")), "QeJF1daIrCh753fIFS8q1vMlE0A=");
_c2 = EditableSpan;
var _c, _c2;
__webpack_require__.$Refresh$.register(_c, "EditableSpan$React.memo");
__webpack_require__.$Refresh$.register(_c2, "EditableSpan");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    EditableSpan.displayName = "EditableSpan";
    // @ts-ignore
    EditableSpan.__docgenInfo = { "description": "", "displayName": "EditableSpan", "props": { "value": { "defaultValue": null, "description": "", "name": "value", "required": true, "type": { "name": "string" } }, "onChange": { "defaultValue": null, "description": "", "name": "onChange", "required": true, "type": { "name": "(newValue: string) => void" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/EditableSpan.tsx#EditableSpan"] = { docgenInfo: EditableSpan.__docgenInfo, name: "EditableSpan", path: "src/EditableSpan.tsx#EditableSpan" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "./src/Task.tsx":
/*!**********************!*\
  !*** ./src/Task.tsx ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Task: () => (/* binding */ Task)
/* harmony export */ });
/* harmony import */ var _mui_material_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mui/material/Checkbox/Checkbox */ "./node_modules/@mui/material/Checkbox/Checkbox.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _EditableSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EditableSpan */ "./src/EditableSpan.tsx");
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/IconButton/IconButton.js");
/* harmony import */ var _mui_icons_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/icons-material */ "./node_modules/@mui/icons-material/esm/Delete.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Task.tsx",
  _s = __webpack_require__.$Refresh$.signature();






const Task = /*#__PURE__*/_s( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_c = _s(props => {
  _s();
  const onClickHandler = () => props.removeTask(props.task.id, props.todolistId);
  const onChangeHandler = e => {
    let newIsDoneValue = e.currentTarget.checked;
    props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId);
  };
  const onTitleChangeHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(newValue => {
    props.changeTaskTitle(props.task.id, newValue, props.todolistId);
  }, [props.task.id, props.changeTaskTitle, props.todolistId]);
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)("div", {
    className: props.task.isDone ? 'is-done' : '',
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_mui_material_Checkbox_Checkbox__WEBPACK_IMPORTED_MODULE_3__["default"], {
      checked: props.task.isDone,
      color: "primary",
      onChange: onChangeHandler
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 27,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_EditableSpan__WEBPACK_IMPORTED_MODULE_1__.EditableSpan, {
      value: props.task.title,
      onChange: onTitleChangeHandler
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 33,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_4__["default"], {
      onClick: onClickHandler,
      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_mui_icons_material__WEBPACK_IMPORTED_MODULE_5__["default"], {}, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 35,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 9
    }, undefined)]
  }, props.task.id, true, {
    fileName: _jsxFileName,
    lineNumber: 26,
    columnNumber: 12
  }, undefined);
}, "twDFCJnizxT5S5FHYI8sqb1EQ7k=")), "twDFCJnizxT5S5FHYI8sqb1EQ7k=");
_c2 = Task;
var _c, _c2;
__webpack_require__.$Refresh$.register(_c, "Task$React.memo");
__webpack_require__.$Refresh$.register(_c2, "Task");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    Task.displayName = "Task";
    // @ts-ignore
    Task.__docgenInfo = { "description": "", "displayName": "Task", "props": { "changeTaskStatus": { "defaultValue": null, "description": "", "name": "changeTaskStatus", "required": true, "type": { "name": "(id: string, isDone: boolean, todolistId: string) => void" } }, "changeTaskTitle": { "defaultValue": null, "description": "", "name": "changeTaskTitle", "required": true, "type": { "name": "(taskId: string, newTitle: string, todolistId: string) => void" } }, "removeTask": { "defaultValue": null, "description": "", "name": "removeTask", "required": true, "type": { "name": "(taskId: string, todolistId: string) => void" } }, "task": { "defaultValue": null, "description": "", "name": "task", "required": true, "type": { "name": "TaskType" } }, "todolistId": { "defaultValue": null, "description": "", "name": "todolistId", "required": true, "type": { "name": "string" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/Task.tsx#Task"] = { docgenInfo: Task.__docgenInfo, name: "Task", path: "src/Task.tsx#Task" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "./src/Todolist.tsx":
/*!**************************!*\
  !*** ./src/Todolist.tsx ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Todolist: () => (/* binding */ Todolist)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _AddItemForm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AddItemForm */ "./src/AddItemForm.tsx");
/* harmony import */ var _EditableSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EditableSpan */ "./src/EditableSpan.tsx");
/* harmony import */ var _Task__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Task */ "./src/Task.tsx");
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/IconButton/IconButton.js");
/* harmony import */ var _mui_material__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material */ "./node_modules/@mui/material/esm/Button/Button.js");
/* harmony import */ var _mui_icons_material__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mui/icons-material */ "./node_modules/@mui/icons-material/esm/Delete.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Todolist.tsx",
  _s = __webpack_require__.$Refresh$.signature();







const Todolist = /*#__PURE__*/_s( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().memo(_c = _s(function (props) {
  _s();
  const addTask = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(title => {
    props.addTask(title, props.id);
  }, [props.addTask, props.id]);
  const removeTodolist = () => {
    props.removeTodolist(props.id);
  };
  const changeTodolistTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(title => {
    props.changeTodolistTitle(props.id, title);
  }, [props.id, props.changeTodolistTitle]);
  const onAllClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);
  const onActiveClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);
  const onCompletedClickHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);
  let tasksForTodolist = props.tasks;
  if (props.filter === 'active') {
    tasksForTodolist = props.tasks.filter(t => t.isDone === false);
  }
  if (props.filter === 'completed') {
    tasksForTodolist = props.tasks.filter(t => t.isDone === true);
  }
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("div", {
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("h3", {
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_EditableSpan__WEBPACK_IMPORTED_MODULE_2__.EditableSpan, {
        value: props.title,
        onChange: changeTodolistTitle
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 58,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_5__["default"], {
        onClick: removeTodolist,
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_mui_icons_material__WEBPACK_IMPORTED_MODULE_6__["default"], {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 60,
          columnNumber: 17
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 59,
        columnNumber: 13
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 58,
      columnNumber: 9
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_AddItemForm__WEBPACK_IMPORTED_MODULE_1__.AddItemForm, {
      addItem: addTask
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 63,
      columnNumber: 9
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("div", {
      children: tasksForTodolist.map(t => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_Task__WEBPACK_IMPORTED_MODULE_3__.Task, {
        task: t,
        changeTaskStatus: props.changeTaskStatus,
        changeTaskTitle: props.changeTaskTitle,
        removeTask: props.removeTask,
        todolistId: props.id
      }, t.id, false, {
        fileName: _jsxFileName,
        lineNumber: 66,
        columnNumber: 43
      }, this))
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 64,
      columnNumber: 9
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)("div", {
      style: {
        paddingTop: '10px'
      },
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_7__["default"], {
        variant: props.filter === 'all' ? 'outlined' : 'text',
        onClick: onAllClickHandler,
        color: 'inherit',
        children: "All"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_7__["default"], {
        variant: props.filter === 'active' ? 'outlined' : 'text',
        onClick: onActiveClickHandler,
        color: 'primary',
        children: "Active"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 82,
        columnNumber: 13
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_mui_material__WEBPACK_IMPORTED_MODULE_7__["default"], {
        variant: props.filter === 'completed' ? 'outlined' : 'text',
        onClick: onCompletedClickHandler,
        color: 'secondary',
        children: "Completed"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 86,
        columnNumber: 13
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 57,
    columnNumber: 12
  }, this);
}, "A69eojXGiXxeKhXoPJklCyEXyY8=")), "A69eojXGiXxeKhXoPJklCyEXyY8=");
_c2 = Todolist;
var _c, _c2;
__webpack_require__.$Refresh$.register(_c, "Todolist$React.memo");
__webpack_require__.$Refresh$.register(_c2, "Todolist");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}
try {
    // @ts-ignore
    Todolist.displayName = "Todolist";
    // @ts-ignore
    Todolist.__docgenInfo = { "description": "", "displayName": "Todolist", "props": { "id": { "defaultValue": null, "description": "", "name": "id", "required": true, "type": { "name": "string" } }, "title": { "defaultValue": null, "description": "", "name": "title", "required": true, "type": { "name": "string" } }, "tasks": { "defaultValue": null, "description": "", "name": "tasks", "required": true, "type": { "name": "TaskType[]" } }, "changeFilter": { "defaultValue": null, "description": "", "name": "changeFilter", "required": true, "type": { "name": "(value: FilterValuesType, todolistId: string) => void" } }, "addTask": { "defaultValue": null, "description": "", "name": "addTask", "required": true, "type": { "name": "(title: string, todolistId: string) => void" } }, "changeTaskStatus": { "defaultValue": null, "description": "", "name": "changeTaskStatus", "required": true, "type": { "name": "(id: string, isDone: boolean, todolistId: string) => void" } }, "changeTaskTitle": { "defaultValue": null, "description": "", "name": "changeTaskTitle", "required": true, "type": { "name": "(taskId: string, newTitle: string, todolistId: string) => void" } }, "removeTask": { "defaultValue": null, "description": "", "name": "removeTask", "required": true, "type": { "name": "(taskId: string, todolistId: string) => void" } }, "removeTodolist": { "defaultValue": null, "description": "", "name": "removeTodolist", "required": true, "type": { "name": "(id: string) => void" } }, "changeTodolistTitle": { "defaultValue": null, "description": "", "name": "changeTodolistTitle", "required": true, "type": { "name": "(id: string, newTitle: string) => void" } }, "filter": { "defaultValue": null, "description": "", "name": "filter", "required": true, "type": { "name": "enum", "value": [{ "value": "\"all\"" }, { "value": "\"active\"" }, { "value": "\"completed\"" }] } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/Todolist.tsx#Todolist"] = { docgenInfo: Todolist.__docgenInfo, name: "Todolist", path: "src/Todolist.tsx#Todolist" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ })

});
//# sourceMappingURL=stories-Task-stories.1bf4ccae75dea64b88c3.hot-update.js.map