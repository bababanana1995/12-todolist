{"ast":null,"code":"var _jsxFileName = \"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/EditableSpan.stories.tsx\",\n  _s = $RefreshSig$(),\n  _Primary$parameters,\n  _Primary$parameters2,\n  _Primary$parameters2$,\n  _AddItemFormErrorStor,\n  _AddItemFormErrorStor2,\n  _AddItemFormErrorStor3;\nimport { AddItemForm } from \"../AddItemForm\";\nimport { action } from '@storybook/addon-actions';\nimport React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField/TextField\";\nimport { IconButton } from \"@mui/material\";\nimport { AddBox } from \"@mui/icons-material\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst meta = {\n  title: 'TODOLISTS/AddItemForm',\n  component: AddItemForm,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n    addItem: {\n      description: 'button clicked inside form'\n      // action: 'clicked'\n    }\n  }\n};\n\nexport default meta;\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const Primary = {\n  args: {\n    addItem: action('button clicked inside form')\n  }\n};\nconst Comp = props => {\n  _s();\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState(\"Title is required\");\n  const addItem = () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title);\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n  const onChangeHandler = e => {\n    setTitle(e.currentTarget.value);\n  };\n  const onKeyPressHandler = e => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      addItem();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      error: !!error,\n      value: title,\n      onChange: onChangeHandler,\n      onKeyPress: onKeyPressHandler,\n      label: \"Title\",\n      helperText: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      color: \"primary\",\n      onClick: addItem,\n      children: /*#__PURE__*/_jsxDEV(AddBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n_s(Comp, \"QoC7pwBBsxqKRIYax6C6798cFt8=\");\n_c = Comp;\nexport const AddItemFormErrorStory = {\n  render: args => /*#__PURE__*/_jsxDEV(Comp, {\n    addItem: action('button clicked inside form')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 19\n  }, this)\n};\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...((_Primary$parameters = Primary.parameters) === null || _Primary$parameters === void 0 ? void 0 : _Primary$parameters.docs),\n    source: {\n      originalSource: \"{\\n  args: {\\n    addItem: action('button clicked inside form')\\n  }\\n}\",\n      ...((_Primary$parameters2 = Primary.parameters) === null || _Primary$parameters2 === void 0 ? void 0 : (_Primary$parameters2$ = _Primary$parameters2.docs) === null || _Primary$parameters2$ === void 0 ? void 0 : _Primary$parameters2$.source)\n    }\n  }\n};\nAddItemFormErrorStory.parameters = {\n  ...AddItemFormErrorStory.parameters,\n  docs: {\n    ...((_AddItemFormErrorStor = AddItemFormErrorStory.parameters) === null || _AddItemFormErrorStor === void 0 ? void 0 : _AddItemFormErrorStor.docs),\n    source: {\n      originalSource: \"{\\n  render: args => <Comp addItem={action('button clicked inside form')} />\\n}\",\n      ...((_AddItemFormErrorStor2 = AddItemFormErrorStory.parameters) === null || _AddItemFormErrorStor2 === void 0 ? void 0 : (_AddItemFormErrorStor3 = _AddItemFormErrorStor2.docs) === null || _AddItemFormErrorStor3 === void 0 ? void 0 : _AddItemFormErrorStor3.source)\n    }\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Comp\");\nexport const __namedExportsOrder = [\"Primary\", \"AddItemFormErrorStory\"];","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport { AddItemForm, AddItemFormPropsType } from \"../AddItemForm\";\nimport { action } from '@storybook/addon-actions';\nimport React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport TextField from \"@mui/material/TextField/TextField\";\nimport { IconButton } from \"@mui/material\";\nimport { AddBox } from \"@mui/icons-material\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nconst meta: Meta<typeof AddItemForm> = {\n  title: 'TODOLISTS/AddItemForm',\n  component: AddItemForm,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n    addItem: {\n      description: 'button clicked inside form'\n      // action: 'clicked'\n    }\n  }\n};\n\nexport default meta;\ntype Story = StoryObj<typeof AddItemForm>;\n\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const Primary: Story = {\n  args: {\n    addItem: action('button clicked inside form')\n  }\n};\nconst Comp = (props: AddItemFormPropsType) => {\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState<string | null>(\"Title is required\");\n  const addItem = () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title);\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.charCode === 13) {\n      addItem();\n    }\n  };\n  return <div>\n            <TextField variant=\"outlined\" error={!!error} value={title} onChange={onChangeHandler} onKeyPress={onKeyPressHandler} label=\"Title\" helperText={error} />\n            <IconButton color=\"primary\" onClick={addItem}>\n                <AddBox />\n            </IconButton>\n        </div>;\n};\nexport const AddItemFormErrorStory: Story = {\n  render: args => <Comp addItem={action('button clicked inside form')} />\n};\nPrimary.parameters = {\n  ...Primary.parameters,\n  docs: {\n    ...Primary.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    addItem: action('button clicked inside form')\\n  }\\n}\",\n      ...Primary.parameters?.docs?.source\n    }\n  }\n};\nAddItemFormErrorStory.parameters = {\n  ...AddItemFormErrorStory.parameters,\n  docs: {\n    ...AddItemFormErrorStory.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: args => <Comp addItem={action('button clicked inside form')} />\\n}\",\n      ...AddItemFormErrorStory.parameters?.docs?.source\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}