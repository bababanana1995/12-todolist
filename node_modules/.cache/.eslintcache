[{"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Header.stories.ts":"1","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Page.stories.ts":"2","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Button.stories.ts":"3","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Header.tsx":"4","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Page.tsx":"5","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Button.tsx":"6","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/AddItemForm.tsx":"7","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/AddItimForm.stories.tsx":"8","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Task.stories.tsx":"9","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Task.tsx":"10","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/EditableSpan.tsx":"11","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Todolist.tsx":"12","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/EditableSpan.stories.tsx":"13","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/AppWithRedux.stories.tsx":"14","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/AppWithRedux.tsx":"15","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/todolists-reducer.ts":"16","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/tasks-reducer.ts":"17","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/store.ts":"18","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/ReduxStoreProviderDecorator.tsx":"19"},{"size":660,"mtime":1690224999296,"results":"20","hashOfConfig":"21"},{"size":819,"mtime":1690224999295,"results":"22","hashOfConfig":"21"},{"size":1262,"mtime":1690224999296,"results":"23","hashOfConfig":"21"},{"size":1515,"mtime":1690224999295,"results":"24","hashOfConfig":"21"},{"size":2581,"mtime":1690224999295,"results":"25","hashOfConfig":"21"},{"size":924,"mtime":1690224999296,"results":"26","hashOfConfig":"21"},{"size":1411,"mtime":1690304059760,"results":"27","hashOfConfig":"21"},{"size":2560,"mtime":1690234579375,"results":"28","hashOfConfig":"21"},{"size":1264,"mtime":1690230694667,"results":"29","hashOfConfig":"21"},{"size":1571,"mtime":1690234231007,"results":"30","hashOfConfig":"21"},{"size":909,"mtime":1690234263843,"results":"31","hashOfConfig":"21"},{"size":3442,"mtime":1690234418066,"results":"32","hashOfConfig":"21"},{"size":960,"mtime":1690234579370,"results":"33","hashOfConfig":"21"},{"size":1007,"mtime":1690299417954,"results":"34","hashOfConfig":"21"},{"size":4866,"mtime":1690234329688,"results":"35","hashOfConfig":"21"},{"size":2569,"mtime":1592805878000,"results":"36","hashOfConfig":"21"},{"size":3524,"mtime":1619073428000,"results":"37","hashOfConfig":"21"},{"size":892,"mtime":1592807984000,"results":"38","hashOfConfig":"21"},{"size":1184,"mtime":1690299596518,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1q2btrb",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"53"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"53"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"107","usedDeprecatedRules":"53"},"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Header.stories.ts",[],[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Page.stories.ts",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Button.stories.ts",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Header.tsx",[],[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Page.tsx",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Button.tsx",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/AddItemForm.tsx",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/AddItimForm.stories.tsx",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/Task.stories.tsx",["108","109","110"],[],"import type {Meta, StoryObj} from '@storybook/react';\nimport React from \"react\";\nimport {Task} from \"../Task\";\nimport {TaskType} from \"../Todolist\";\nimport {action} from \"@storybook/addon-actions\";\nimport {string} from \"prop-types\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nconst meta: Meta<typeof Task> = {\n    title: 'TODOLISTS/Task',\n    component: Task,\n    // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n    tags: ['autodocs'],\n    // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n    args: {\n        changeTaskStatus: action('changeTaskStatus'),\n        changeTaskTitle: action('changeTaskStatus'),\n        removeTask: action('changeTaskStatus'),\n        task: {id: 'haha', title: 'JS', isDone: true},\n        todolistId: '123'\n    },\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Task>;\n\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const TaskIsDoneStory: Story = {\n    args: {\n    },\n};\nexport const TaskIsNoteDoneStory: Story = {\n    args: {\n        task: {id: 'haha', title: 'CSS', isDone: false},\n\n    },\n};\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Task.tsx",["111"],[],"import Checkbox from '@mui/material/Checkbox/Checkbox'\r\nimport React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {TaskType} from './Todolist'\r\nimport {IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.task.id, props.todolistId)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.changeTaskTitle, props.todolistId]);\r\n\r\n\r\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/EditableSpan.tsx",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/Todolist.tsx",["112","113","114","115","116"],[],"import React, {useCallback} from 'react'\r\nimport {FilterValuesType} from './App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\n\r\nimport {Task} from './Task'\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/EditableSpan.stories.tsx",["117"],[],"import type {Meta, StoryObj} from '@storybook/react';\nimport {action} from '@storybook/addon-actions'\nimport React from \"react\";\nimport {EditableSpan} from \"../EditableSpan\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nconst meta: Meta<typeof EditableSpan> = {\n  title: 'TODOLISTS/EditableSpan',\n  component: EditableSpan,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\n  argTypes: {\n      value: {\n          defaultValue: 'hello'\n      },\n      onChange: action('changed'),\n    }\n\n};\n\nexport default meta;\ntype Story = StoryObj<typeof EditableSpan>;\n\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const EditableSpanStory: Story = {\n  args: {\n\n  },\n};\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/AppWithRedux.stories.tsx",["118","119"],[],"import type {Meta, StoryObj} from '@storybook/react';\nimport React from \"react\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"../state/store\";\nimport AppWithRedux from \"../AppWithRedux\";\nimport {ReduxStoreProviderDecorator} from \"./ReduxStoreProviderDecorator\";\n\n// More on how to set up stories at: https://storybook.js.org/docs/react/writing-stories/introduction#default-export\nconst meta: Meta<typeof AppWithRedux> = {\n  title: 'TODOLISTS/AppWithRedux',\n  component: AppWithRedux,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/react/writing-docs/autodocs\n  tags: ['autodocs'],\n  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes\ndecorators:[ReduxStoreProviderDecorator]\n\n};\n\nexport default meta;\ntype Story = StoryObj<typeof AppWithRedux>;\n\n// More on writing stories with args: https://storybook.js.org/docs/react/writing-stories/args\nexport const AppWithReduxStory: Story = {\nrender: args => <AppWithRedux/>\n};\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/AppWithRedux.tsx",["120","121"],[],"import React, {useCallback} from 'react'\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n/*\r\nconst Fake = React.memo(function() {\r\n    console.log(\"FAKE\")\r\n    const arr = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks.count)\r\n    return <h1>{arr.length}</h1>\r\n})\r\n*/\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback( (id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback( (title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/todolists-reducer.ts",["122"],[],"import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/tasks-reducer.ts",["123"],[],"import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {\r\n    count: []\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, isDone: action.isDone}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t);\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/state/store.ts",[],[],"/Users/daniltkacenko/react_kamasutra/todolist-lesson/12-todolist/src/stories/ReduxStoreProviderDecorator.tsx",["124","125","126"],[],"import React from 'react'\nimport {Provider} from \"react-redux\";\nimport {combineReducers, createStore, legacy_createStore} from \"redux\";\nimport {v1} from \"uuid\";\nimport {tasksReducer} from \"../state/tasks-reducer\";\nimport {todolistsReducer} from \"../state/todolists-reducer\";\nimport {AppRootStateType} from \"../state/store\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n\nconst initialGlobalState = {\n    todolists: [\n        {id: \"todolistId1\", title: \"What to learn\", filter: \"all\"},\n        {id: \"todolistId2\", title: \"What to buy\", filter: \"all\"}\n    ] ,\n    tasks: {\n        [\"todolistId1\"]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: false}\n        ],\n        [\"todolistId2\"]: [\n            {id: v1(), title: \"Milk\", isDone: false},\n            {id: v1(), title: \"React Book\", isDone: true}\n        ]\n    }\n};\n\nexport const storyBookStore = legacy_createStore(rootReducer, initialGlobalState as AppRootStateType);\n\n\nexport const ReduxStoreProviderDecorator = (storyFn: () => React.ReactNode) => {\n    return <Provider store={storyBookStore}>{storyFn()}</Provider>\n}\n",{"ruleId":"127","severity":1,"message":"128","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":13},{"ruleId":"127","severity":1,"message":"131","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":17},{"ruleId":"127","severity":1,"message":"132","line":6,"column":9,"nodeType":"129","messageId":"130","endLine":6,"endColumn":15},{"ruleId":"133","severity":1,"message":"134","line":23,"column":8,"nodeType":"135","endLine":23,"endColumn":64,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"134","line":35,"column":8,"nodeType":"135","endLine":35,"endColumn":33,"suggestions":"137"},{"ruleId":"133","severity":1,"message":"134","line":42,"column":8,"nodeType":"135","endLine":42,"endColumn":45,"suggestions":"138"},{"ruleId":"133","severity":1,"message":"134","line":44,"column":86,"nodeType":"135","endLine":44,"endColumn":116,"suggestions":"139"},{"ruleId":"133","severity":1,"message":"134","line":45,"column":92,"nodeType":"135","endLine":45,"endColumn":122,"suggestions":"140"},{"ruleId":"133","severity":1,"message":"134","line":46,"column":98,"nodeType":"135","endLine":46,"endColumn":128,"suggestions":"141"},{"ruleId":"127","severity":1,"message":"128","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":13},{"ruleId":"127","severity":1,"message":"142","line":3,"column":9,"nodeType":"129","messageId":"130","endLine":3,"endColumn":17},{"ruleId":"127","severity":1,"message":"143","line":4,"column":9,"nodeType":"129","messageId":"130","endLine":4,"endColumn":14},{"ruleId":"127","severity":1,"message":"144","line":12,"column":5,"nodeType":"129","messageId":"130","endLine":12,"endColumn":21},{"ruleId":"127","severity":1,"message":"145","line":14,"column":73,"nodeType":"129","messageId":"130","endLine":14,"endColumn":85},{"ruleId":"146","severity":1,"message":"147","line":33,"column":45,"nodeType":"148","messageId":"149","endLine":33,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":47,"column":53,"nodeType":"148","messageId":"149","endLine":47,"endColumn":55},{"ruleId":"127","severity":1,"message":"150","line":3,"column":26,"nodeType":"129","messageId":"130","endLine":3,"endColumn":37},{"ruleId":"151","severity":1,"message":"152","line":20,"column":9,"nodeType":"153","messageId":"154","endLine":23,"endColumn":10,"fix":"155"},{"ruleId":"151","severity":1,"message":"156","line":24,"column":9,"nodeType":"153","messageId":"154","endLine":27,"endColumn":10,"fix":"157"},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'TaskType' is defined but never used.","'string' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["158"],["159"],["160"],["161"],["162"],["163"],"'Provider' is defined but never used.","'store' is defined but never used.","'todolistsReducer' is defined but never used.","'tasksReducer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'createStore' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"todolistId1\"] found.","Property","unnecessarilyComputedProperty",{"range":"164","text":"165"},"Unnecessarily computed property [\"todolistId2\"] found.",{"range":"166","text":"167"},{"desc":"168","fix":"169"},{"desc":"168","fix":"170"},{"desc":"168","fix":"171"},{"desc":"168","fix":"172"},{"desc":"168","fix":"173"},{"desc":"168","fix":"174"},[632,647],"\"todolistId1\"",[778,793],"\"todolistId2\"","Update the dependencies array to be: [props]",{"range":"175","text":"176"},{"range":"177","text":"176"},{"range":"178","text":"176"},{"range":"179","text":"176"},{"range":"180","text":"176"},{"range":"181","text":"176"},[1088,1144],"[props]",[1141,1166],[1379,1416],[1506,1536],[1630,1660],[1760,1790]]